// Global Variables
RING_UPPER_LIMIT = 20;   // when node joining or leaving, if # of nodes > UPPER_LIMIT, ring-formation
RING_LOWER_LIMIT = 10;   // when node joining or leaving, if # of nodes < LOWER_LIMIT, ring-destruction
HEARTBEAT_TIMEOUT = 5;   // timeout set for liveness checking
HEARTBEAT_INTERVAL = 5;  // interval set between two heartbeat messages

/* Structure of a Node
 *  - predecessor (the one behind this node on the ring)
 *  - successor (the one next to this node on the ring)
 *  - pre-predecessor (used for checking liveness of its predecessor)
 *  - suc-successor (used for checking liveness of its successor)
 *  - sequence_number (int, deferenciate which broadcast, for each broadcast there will be a new contact node or a few contact nodes)
 *  - broadcast_key (int, k-nary broadcast, randomly generated by the contact node (2, 3, 4, 5))
*/

// Liveness check: A node will send heartbeat message to its predecessor and successor periodically
liveness_check_predecessor {
	return_obj = ping(predecessor.ip)
	if (return_obj.msg == 'TIMEOUT') {
		// check with its pre-predecessor (Remote-Procedure-Call)
		status = check_your_successor(pre-predecessor.ip)
		if (status == false) {
			// recheck
			return_obj = ping(predecessor.ip)
			if (return_obj.msg == 'TIMEOUT')
				return false;  // timeout
			else
				return true;   // alive
		}
		else
			return true;   // alive
	}
}

liveness_check_successor {
	return_obj = ping(successor.ip)
	if (return_obj.msg == 'TIMEOUT') {
		// check with its suc-successor (Remote-Procedure-Call)
		status = check_your_predecessor(suc-successor.ip)
		if (status == false) {
			// recheck
			return_obj = ping(successor.ip)
			if (return_obj.msg == 'TIMEOUT')
				return false;  // timeout
			else
				return true;   // alive
		}
		else
			return true;   // alive
	}
}

// remote procedure call executed by its pre-predecessor
check_your_predecessor {
	return_obj = ping(predecessor.ip)
	if (return_obj.msg == 'TIMEOUT')
		return false;
	else
		return true;
}

// remote procedure call executed by its suc-successor
check_your_sucessor {
	return_obj = ping(successor.ip)
	if (return_obj.msg == 'TIMEOUT')
		return false;
	else
		return true;
}

// Node Join

// Node Left - detect the missing of a node: A -> B -> C, A will detect