// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bootstrap_message.proto

#ifndef PROTOBUF_INCLUDED_bootstrap_5fmessage_2eproto
#define PROTOBUF_INCLUDED_bootstrap_5fmessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_bootstrap_5fmessage_2eproto 

namespace protobuf_bootstrap_5fmessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_bootstrap_5fmessage_2eproto
namespace bootstrap_message {
class BootstrapMessage;
class BootstrapMessageDefaultTypeInternal;
extern BootstrapMessageDefaultTypeInternal _BootstrapMessage_default_instance_;
class Broadcast;
class BroadcastDefaultTypeInternal;
extern BroadcastDefaultTypeInternal _Broadcast_default_instance_;
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class Init;
class InitDefaultTypeInternal;
extern InitDefaultTypeInternal _Init_default_instance_;
class PullLog;
class PullLogDefaultTypeInternal;
extern PullLogDefaultTypeInternal _PullLog_default_instance_;
class PushLog;
class PushLogDefaultTypeInternal;
extern PushLogDefaultTypeInternal _PushLog_default_instance_;
}  // namespace bootstrap_message
namespace google {
namespace protobuf {
template<> ::bootstrap_message::BootstrapMessage* Arena::CreateMaybeMessage<::bootstrap_message::BootstrapMessage>(Arena*);
template<> ::bootstrap_message::Broadcast* Arena::CreateMaybeMessage<::bootstrap_message::Broadcast>(Arena*);
template<> ::bootstrap_message::Config* Arena::CreateMaybeMessage<::bootstrap_message::Config>(Arena*);
template<> ::bootstrap_message::Init* Arena::CreateMaybeMessage<::bootstrap_message::Init>(Arena*);
template<> ::bootstrap_message::PullLog* Arena::CreateMaybeMessage<::bootstrap_message::PullLog>(Arena*);
template<> ::bootstrap_message::PushLog* Arena::CreateMaybeMessage<::bootstrap_message::PushLog>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace bootstrap_message {

enum BootstrapMessage_Type {
  BootstrapMessage_Type_INIT = 0,
  BootstrapMessage_Type_CONFIG = 1,
  BootstrapMessage_Type_BROADCAST = 3,
  BootstrapMessage_Type_PULL_LOG = 5,
  BootstrapMessage_Type_PUSH_LOG = 6,
  BootstrapMessage_Type_BootstrapMessage_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BootstrapMessage_Type_BootstrapMessage_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BootstrapMessage_Type_IsValid(int value);
const BootstrapMessage_Type BootstrapMessage_Type_Type_MIN = BootstrapMessage_Type_INIT;
const BootstrapMessage_Type BootstrapMessage_Type_Type_MAX = BootstrapMessage_Type_PUSH_LOG;
const int BootstrapMessage_Type_Type_ARRAYSIZE = BootstrapMessage_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* BootstrapMessage_Type_descriptor();
inline const ::std::string& BootstrapMessage_Type_Name(BootstrapMessage_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    BootstrapMessage_Type_descriptor(), value);
}
inline bool BootstrapMessage_Type_Parse(
    const ::std::string& name, BootstrapMessage_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BootstrapMessage_Type>(
    BootstrapMessage_Type_descriptor(), name, value);
}
enum Config_EvalType {
  Config_EvalType_HGFRR = 0,
  Config_EvalType_KADEMLIA = 1,
  Config_EvalType_Config_EvalType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Config_EvalType_Config_EvalType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Config_EvalType_IsValid(int value);
const Config_EvalType Config_EvalType_EvalType_MIN = Config_EvalType_HGFRR;
const Config_EvalType Config_EvalType_EvalType_MAX = Config_EvalType_KADEMLIA;
const int Config_EvalType_EvalType_ARRAYSIZE = Config_EvalType_EvalType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Config_EvalType_descriptor();
inline const ::std::string& Config_EvalType_Name(Config_EvalType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Config_EvalType_descriptor(), value);
}
inline bool Config_EvalType_Parse(
    const ::std::string& name, Config_EvalType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Config_EvalType>(
    Config_EvalType_descriptor(), name, value);
}
// ===================================================================

class BootstrapMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bootstrap_message.BootstrapMessage) */ {
 public:
  BootstrapMessage();
  virtual ~BootstrapMessage();

  BootstrapMessage(const BootstrapMessage& from);

  inline BootstrapMessage& operator=(const BootstrapMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BootstrapMessage(BootstrapMessage&& from) noexcept
    : BootstrapMessage() {
    *this = ::std::move(from);
  }

  inline BootstrapMessage& operator=(BootstrapMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BootstrapMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BootstrapMessage* internal_default_instance() {
    return reinterpret_cast<const BootstrapMessage*>(
               &_BootstrapMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BootstrapMessage* other);
  friend void swap(BootstrapMessage& a, BootstrapMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BootstrapMessage* New() const final {
    return CreateMaybeMessage<BootstrapMessage>(NULL);
  }

  BootstrapMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BootstrapMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BootstrapMessage& from);
  void MergeFrom(const BootstrapMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BootstrapMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BootstrapMessage_Type Type;
  static const Type INIT =
    BootstrapMessage_Type_INIT;
  static const Type CONFIG =
    BootstrapMessage_Type_CONFIG;
  static const Type BROADCAST =
    BootstrapMessage_Type_BROADCAST;
  static const Type PULL_LOG =
    BootstrapMessage_Type_PULL_LOG;
  static const Type PUSH_LOG =
    BootstrapMessage_Type_PUSH_LOG;
  static inline bool Type_IsValid(int value) {
    return BootstrapMessage_Type_IsValid(value);
  }
  static const Type Type_MIN =
    BootstrapMessage_Type_Type_MIN;
  static const Type Type_MAX =
    BootstrapMessage_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    BootstrapMessage_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return BootstrapMessage_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return BootstrapMessage_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return BootstrapMessage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .bootstrap_message.Init init = 2;
  bool has_init() const;
  void clear_init();
  static const int kInitFieldNumber = 2;
  private:
  const ::bootstrap_message::Init& _internal_init() const;
  public:
  const ::bootstrap_message::Init& init() const;
  ::bootstrap_message::Init* release_init();
  ::bootstrap_message::Init* mutable_init();
  void set_allocated_init(::bootstrap_message::Init* init);

  // .bootstrap_message.Config config = 3;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 3;
  private:
  const ::bootstrap_message::Config& _internal_config() const;
  public:
  const ::bootstrap_message::Config& config() const;
  ::bootstrap_message::Config* release_config();
  ::bootstrap_message::Config* mutable_config();
  void set_allocated_config(::bootstrap_message::Config* config);

  // .bootstrap_message.Broadcast broadcast = 4;
  bool has_broadcast() const;
  void clear_broadcast();
  static const int kBroadcastFieldNumber = 4;
  private:
  const ::bootstrap_message::Broadcast& _internal_broadcast() const;
  public:
  const ::bootstrap_message::Broadcast& broadcast() const;
  ::bootstrap_message::Broadcast* release_broadcast();
  ::bootstrap_message::Broadcast* mutable_broadcast();
  void set_allocated_broadcast(::bootstrap_message::Broadcast* broadcast);

  // .bootstrap_message.PullLog pull_log = 5;
  bool has_pull_log() const;
  void clear_pull_log();
  static const int kPullLogFieldNumber = 5;
  private:
  const ::bootstrap_message::PullLog& _internal_pull_log() const;
  public:
  const ::bootstrap_message::PullLog& pull_log() const;
  ::bootstrap_message::PullLog* release_pull_log();
  ::bootstrap_message::PullLog* mutable_pull_log();
  void set_allocated_pull_log(::bootstrap_message::PullLog* pull_log);

  // .bootstrap_message.PushLog push_log = 6;
  bool has_push_log() const;
  void clear_push_log();
  static const int kPushLogFieldNumber = 6;
  private:
  const ::bootstrap_message::PushLog& _internal_push_log() const;
  public:
  const ::bootstrap_message::PushLog& push_log() const;
  ::bootstrap_message::PushLog* release_push_log();
  ::bootstrap_message::PushLog* mutable_push_log();
  void set_allocated_push_log(::bootstrap_message::PushLog* push_log);

  // .bootstrap_message.BootstrapMessage.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::bootstrap_message::BootstrapMessage_Type type() const;
  void set_type(::bootstrap_message::BootstrapMessage_Type value);

  // @@protoc_insertion_point(class_scope:bootstrap_message.BootstrapMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::bootstrap_message::Init* init_;
  ::bootstrap_message::Config* config_;
  ::bootstrap_message::Broadcast* broadcast_;
  ::bootstrap_message::PullLog* pull_log_;
  ::bootstrap_message::PushLog* push_log_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bootstrap_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Init : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bootstrap_message.Init) */ {
 public:
  Init();
  virtual ~Init();

  Init(const Init& from);

  inline Init& operator=(const Init& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Init(Init&& from) noexcept
    : Init() {
    *this = ::std::move(from);
  }

  inline Init& operator=(Init&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Init& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Init* internal_default_instance() {
    return reinterpret_cast<const Init*>(
               &_Init_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Init* other);
  friend void swap(Init& a, Init& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Init* New() const final {
    return CreateMaybeMessage<Init>(NULL);
  }

  Init* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Init>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Init& from);
  void MergeFrom(const Init& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Init* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 port = 1;
  void clear_port();
  static const int kPortFieldNumber = 1;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bootstrap_message.Init)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bootstrap_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bootstrap_message.Config) */ {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Config* other);
  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(NULL);
  }

  Config* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Config_EvalType EvalType;
  static const EvalType HGFRR =
    Config_EvalType_HGFRR;
  static const EvalType KADEMLIA =
    Config_EvalType_KADEMLIA;
  static inline bool EvalType_IsValid(int value) {
    return Config_EvalType_IsValid(value);
  }
  static const EvalType EvalType_MIN =
    Config_EvalType_EvalType_MIN;
  static const EvalType EvalType_MAX =
    Config_EvalType_EvalType_MAX;
  static const int EvalType_ARRAYSIZE =
    Config_EvalType_EvalType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EvalType_descriptor() {
    return Config_EvalType_descriptor();
  }
  static inline const ::std::string& EvalType_Name(EvalType value) {
    return Config_EvalType_Name(value);
  }
  static inline bool EvalType_Parse(const ::std::string& name,
      EvalType* value) {
    return Config_EvalType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string table_ids = 5;
  int table_ids_size() const;
  void clear_table_ids();
  static const int kTableIdsFieldNumber = 5;
  const ::std::string& table_ids(int index) const;
  ::std::string* mutable_table_ids(int index);
  void set_table_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_table_ids(int index, ::std::string&& value);
  #endif
  void set_table_ids(int index, const char* value);
  void set_table_ids(int index, const char* value, size_t size);
  ::std::string* add_table_ids();
  void add_table_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_table_ids(::std::string&& value);
  #endif
  void add_table_ids(const char* value);
  void add_table_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& table_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_table_ids();

  // repeated string table_ips = 6;
  int table_ips_size() const;
  void clear_table_ips();
  static const int kTableIpsFieldNumber = 6;
  const ::std::string& table_ips(int index) const;
  ::std::string* mutable_table_ips(int index);
  void set_table_ips(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_table_ips(int index, ::std::string&& value);
  #endif
  void set_table_ips(int index, const char* value);
  void set_table_ips(int index, const char* value, size_t size);
  ::std::string* add_table_ips();
  void add_table_ips(const ::std::string& value);
  #if LANG_CXX11
  void add_table_ips(::std::string&& value);
  #endif
  void add_table_ips(const char* value);
  void add_table_ips(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& table_ips() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_table_ips();

  // repeated uint32 table_ports = 7;
  int table_ports_size() const;
  void clear_table_ports();
  static const int kTablePortsFieldNumber = 7;
  ::google::protobuf::uint32 table_ports(int index) const;
  void set_table_ports(int index, ::google::protobuf::uint32 value);
  void add_table_ports(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      table_ports() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_table_ports();

  // string node_id = 3;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 3;
  const ::std::string& node_id() const;
  void set_node_id(const ::std::string& value);
  #if LANG_CXX11
  void set_node_id(::std::string&& value);
  #endif
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  ::std::string* mutable_node_id();
  ::std::string* release_node_id();
  void set_allocated_node_id(::std::string* node_id);

  // uint32 run_id = 1;
  void clear_run_id();
  static const int kRunIdFieldNumber = 1;
  ::google::protobuf::uint32 run_id() const;
  void set_run_id(::google::protobuf::uint32 value);

  // .bootstrap_message.Config.EvalType eval_type = 2;
  void clear_eval_type();
  static const int kEvalTypeFieldNumber = 2;
  ::bootstrap_message::Config_EvalType eval_type() const;
  void set_eval_type(::bootstrap_message::Config_EvalType value);

  // uint32 table_size = 4;
  void clear_table_size();
  static const int kTableSizeFieldNumber = 4;
  ::google::protobuf::uint32 table_size() const;
  void set_table_size(::google::protobuf::uint32 value);

  // uint32 num_nodes_in_dist = 20;
  void clear_num_nodes_in_dist();
  static const int kNumNodesInDistFieldNumber = 20;
  ::google::protobuf::uint32 num_nodes_in_dist() const;
  void set_num_nodes_in_dist(::google::protobuf::uint32 value);

  // uint32 num_cnodes_in_dist = 21;
  void clear_num_cnodes_in_dist();
  static const int kNumCnodesInDistFieldNumber = 21;
  ::google::protobuf::uint32 num_cnodes_in_dist() const;
  void set_num_cnodes_in_dist(::google::protobuf::uint32 value);

  // uint32 num_nodes_in_city = 22;
  void clear_num_nodes_in_city();
  static const int kNumNodesInCityFieldNumber = 22;
  ::google::protobuf::uint32 num_nodes_in_city() const;
  void set_num_nodes_in_city(::google::protobuf::uint32 value);

  // uint32 num_cnodes_in_city = 23;
  void clear_num_cnodes_in_city();
  static const int kNumCnodesInCityFieldNumber = 23;
  ::google::protobuf::uint32 num_cnodes_in_city() const;
  void set_num_cnodes_in_city(::google::protobuf::uint32 value);

  // uint32 num_nodes_in_state = 24;
  void clear_num_nodes_in_state();
  static const int kNumNodesInStateFieldNumber = 24;
  ::google::protobuf::uint32 num_nodes_in_state() const;
  void set_num_nodes_in_state(::google::protobuf::uint32 value);

  // uint32 num_cnodes_in_state = 25;
  void clear_num_cnodes_in_state();
  static const int kNumCnodesInStateFieldNumber = 25;
  ::google::protobuf::uint32 num_cnodes_in_state() const;
  void set_num_cnodes_in_state(::google::protobuf::uint32 value);

  // uint32 num_nodes_in_country = 26;
  void clear_num_nodes_in_country();
  static const int kNumNodesInCountryFieldNumber = 26;
  ::google::protobuf::uint32 num_nodes_in_country() const;
  void set_num_nodes_in_country(::google::protobuf::uint32 value);

  // uint32 num_cnodes_in_country = 27;
  void clear_num_cnodes_in_country();
  static const int kNumCnodesInCountryFieldNumber = 27;
  ::google::protobuf::uint32 num_cnodes_in_country() const;
  void set_num_cnodes_in_country(::google::protobuf::uint32 value);

  // uint32 num_nodes_in_continent = 28;
  void clear_num_nodes_in_continent();
  static const int kNumNodesInContinentFieldNumber = 28;
  ::google::protobuf::uint32 num_nodes_in_continent() const;
  void set_num_nodes_in_continent(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bootstrap_message.Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> table_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> table_ips_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > table_ports_;
  mutable int _table_ports_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr node_id_;
  ::google::protobuf::uint32 run_id_;
  int eval_type_;
  ::google::protobuf::uint32 table_size_;
  ::google::protobuf::uint32 num_nodes_in_dist_;
  ::google::protobuf::uint32 num_cnodes_in_dist_;
  ::google::protobuf::uint32 num_nodes_in_city_;
  ::google::protobuf::uint32 num_cnodes_in_city_;
  ::google::protobuf::uint32 num_nodes_in_state_;
  ::google::protobuf::uint32 num_cnodes_in_state_;
  ::google::protobuf::uint32 num_nodes_in_country_;
  ::google::protobuf::uint32 num_cnodes_in_country_;
  ::google::protobuf::uint32 num_nodes_in_continent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bootstrap_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Broadcast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bootstrap_message.Broadcast) */ {
 public:
  Broadcast();
  virtual ~Broadcast();

  Broadcast(const Broadcast& from);

  inline Broadcast& operator=(const Broadcast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Broadcast(Broadcast&& from) noexcept
    : Broadcast() {
    *this = ::std::move(from);
  }

  inline Broadcast& operator=(Broadcast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Broadcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Broadcast* internal_default_instance() {
    return reinterpret_cast<const Broadcast*>(
               &_Broadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Broadcast* other);
  friend void swap(Broadcast& a, Broadcast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Broadcast* New() const final {
    return CreateMaybeMessage<Broadcast>(NULL);
  }

  Broadcast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Broadcast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Broadcast& from);
  void MergeFrom(const Broadcast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Broadcast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 workload_size = 1;
  void clear_workload_size();
  static const int kWorkloadSizeFieldNumber = 1;
  ::google::protobuf::uint32 workload_size() const;
  void set_workload_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bootstrap_message.Broadcast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 workload_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bootstrap_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PullLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bootstrap_message.PullLog) */ {
 public:
  PullLog();
  virtual ~PullLog();

  PullLog(const PullLog& from);

  inline PullLog& operator=(const PullLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PullLog(PullLog&& from) noexcept
    : PullLog() {
    *this = ::std::move(from);
  }

  inline PullLog& operator=(PullLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PullLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullLog* internal_default_instance() {
    return reinterpret_cast<const PullLog*>(
               &_PullLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PullLog* other);
  friend void swap(PullLog& a, PullLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PullLog* New() const final {
    return CreateMaybeMessage<PullLog>(NULL);
  }

  PullLog* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PullLog>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PullLog& from);
  void MergeFrom(const PullLog& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 run_id = 1;
  void clear_run_id();
  static const int kRunIdFieldNumber = 1;
  ::google::protobuf::uint32 run_id() const;
  void set_run_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bootstrap_message.PullLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 run_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bootstrap_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PushLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bootstrap_message.PushLog) */ {
 public:
  PushLog();
  virtual ~PushLog();

  PushLog(const PushLog& from);

  inline PushLog& operator=(const PushLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PushLog(PushLog&& from) noexcept
    : PushLog() {
    *this = ::std::move(from);
  }

  inline PushLog& operator=(PushLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PushLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushLog* internal_default_instance() {
    return reinterpret_cast<const PushLog*>(
               &_PushLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PushLog* other);
  friend void swap(PushLog& a, PushLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PushLog* New() const final {
    return CreateMaybeMessage<PushLog>(NULL);
  }

  PushLog* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PushLog>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PushLog& from);
  void MergeFrom(const PushLog& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string log = 2;
  void clear_log();
  static const int kLogFieldNumber = 2;
  const ::std::string& log() const;
  void set_log(const ::std::string& value);
  #if LANG_CXX11
  void set_log(::std::string&& value);
  #endif
  void set_log(const char* value);
  void set_log(const char* value, size_t size);
  ::std::string* mutable_log();
  ::std::string* release_log();
  void set_allocated_log(::std::string* log);

  // uint32 run_id = 1;
  void clear_run_id();
  static const int kRunIdFieldNumber = 1;
  ::google::protobuf::uint32 run_id() const;
  void set_run_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bootstrap_message.PushLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr log_;
  ::google::protobuf::uint32 run_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_bootstrap_5fmessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BootstrapMessage

// .bootstrap_message.BootstrapMessage.Type type = 1;
inline void BootstrapMessage::clear_type() {
  type_ = 0;
}
inline ::bootstrap_message::BootstrapMessage_Type BootstrapMessage::type() const {
  // @@protoc_insertion_point(field_get:bootstrap_message.BootstrapMessage.type)
  return static_cast< ::bootstrap_message::BootstrapMessage_Type >(type_);
}
inline void BootstrapMessage::set_type(::bootstrap_message::BootstrapMessage_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:bootstrap_message.BootstrapMessage.type)
}

// .bootstrap_message.Init init = 2;
inline bool BootstrapMessage::has_init() const {
  return this != internal_default_instance() && init_ != NULL;
}
inline void BootstrapMessage::clear_init() {
  if (GetArenaNoVirtual() == NULL && init_ != NULL) {
    delete init_;
  }
  init_ = NULL;
}
inline const ::bootstrap_message::Init& BootstrapMessage::_internal_init() const {
  return *init_;
}
inline const ::bootstrap_message::Init& BootstrapMessage::init() const {
  const ::bootstrap_message::Init* p = init_;
  // @@protoc_insertion_point(field_get:bootstrap_message.BootstrapMessage.init)
  return p != NULL ? *p : *reinterpret_cast<const ::bootstrap_message::Init*>(
      &::bootstrap_message::_Init_default_instance_);
}
inline ::bootstrap_message::Init* BootstrapMessage::release_init() {
  // @@protoc_insertion_point(field_release:bootstrap_message.BootstrapMessage.init)
  
  ::bootstrap_message::Init* temp = init_;
  init_ = NULL;
  return temp;
}
inline ::bootstrap_message::Init* BootstrapMessage::mutable_init() {
  
  if (init_ == NULL) {
    auto* p = CreateMaybeMessage<::bootstrap_message::Init>(GetArenaNoVirtual());
    init_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bootstrap_message.BootstrapMessage.init)
  return init_;
}
inline void BootstrapMessage::set_allocated_init(::bootstrap_message::Init* init) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete init_;
  }
  if (init) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      init = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, init, submessage_arena);
    }
    
  } else {
    
  }
  init_ = init;
  // @@protoc_insertion_point(field_set_allocated:bootstrap_message.BootstrapMessage.init)
}

// .bootstrap_message.Config config = 3;
inline bool BootstrapMessage::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void BootstrapMessage::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::bootstrap_message::Config& BootstrapMessage::_internal_config() const {
  return *config_;
}
inline const ::bootstrap_message::Config& BootstrapMessage::config() const {
  const ::bootstrap_message::Config* p = config_;
  // @@protoc_insertion_point(field_get:bootstrap_message.BootstrapMessage.config)
  return p != NULL ? *p : *reinterpret_cast<const ::bootstrap_message::Config*>(
      &::bootstrap_message::_Config_default_instance_);
}
inline ::bootstrap_message::Config* BootstrapMessage::release_config() {
  // @@protoc_insertion_point(field_release:bootstrap_message.BootstrapMessage.config)
  
  ::bootstrap_message::Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::bootstrap_message::Config* BootstrapMessage::mutable_config() {
  
  if (config_ == NULL) {
    auto* p = CreateMaybeMessage<::bootstrap_message::Config>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bootstrap_message.BootstrapMessage.config)
  return config_;
}
inline void BootstrapMessage::set_allocated_config(::bootstrap_message::Config* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:bootstrap_message.BootstrapMessage.config)
}

// .bootstrap_message.Broadcast broadcast = 4;
inline bool BootstrapMessage::has_broadcast() const {
  return this != internal_default_instance() && broadcast_ != NULL;
}
inline void BootstrapMessage::clear_broadcast() {
  if (GetArenaNoVirtual() == NULL && broadcast_ != NULL) {
    delete broadcast_;
  }
  broadcast_ = NULL;
}
inline const ::bootstrap_message::Broadcast& BootstrapMessage::_internal_broadcast() const {
  return *broadcast_;
}
inline const ::bootstrap_message::Broadcast& BootstrapMessage::broadcast() const {
  const ::bootstrap_message::Broadcast* p = broadcast_;
  // @@protoc_insertion_point(field_get:bootstrap_message.BootstrapMessage.broadcast)
  return p != NULL ? *p : *reinterpret_cast<const ::bootstrap_message::Broadcast*>(
      &::bootstrap_message::_Broadcast_default_instance_);
}
inline ::bootstrap_message::Broadcast* BootstrapMessage::release_broadcast() {
  // @@protoc_insertion_point(field_release:bootstrap_message.BootstrapMessage.broadcast)
  
  ::bootstrap_message::Broadcast* temp = broadcast_;
  broadcast_ = NULL;
  return temp;
}
inline ::bootstrap_message::Broadcast* BootstrapMessage::mutable_broadcast() {
  
  if (broadcast_ == NULL) {
    auto* p = CreateMaybeMessage<::bootstrap_message::Broadcast>(GetArenaNoVirtual());
    broadcast_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bootstrap_message.BootstrapMessage.broadcast)
  return broadcast_;
}
inline void BootstrapMessage::set_allocated_broadcast(::bootstrap_message::Broadcast* broadcast) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete broadcast_;
  }
  if (broadcast) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      broadcast = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, broadcast, submessage_arena);
    }
    
  } else {
    
  }
  broadcast_ = broadcast;
  // @@protoc_insertion_point(field_set_allocated:bootstrap_message.BootstrapMessage.broadcast)
}

// .bootstrap_message.PullLog pull_log = 5;
inline bool BootstrapMessage::has_pull_log() const {
  return this != internal_default_instance() && pull_log_ != NULL;
}
inline void BootstrapMessage::clear_pull_log() {
  if (GetArenaNoVirtual() == NULL && pull_log_ != NULL) {
    delete pull_log_;
  }
  pull_log_ = NULL;
}
inline const ::bootstrap_message::PullLog& BootstrapMessage::_internal_pull_log() const {
  return *pull_log_;
}
inline const ::bootstrap_message::PullLog& BootstrapMessage::pull_log() const {
  const ::bootstrap_message::PullLog* p = pull_log_;
  // @@protoc_insertion_point(field_get:bootstrap_message.BootstrapMessage.pull_log)
  return p != NULL ? *p : *reinterpret_cast<const ::bootstrap_message::PullLog*>(
      &::bootstrap_message::_PullLog_default_instance_);
}
inline ::bootstrap_message::PullLog* BootstrapMessage::release_pull_log() {
  // @@protoc_insertion_point(field_release:bootstrap_message.BootstrapMessage.pull_log)
  
  ::bootstrap_message::PullLog* temp = pull_log_;
  pull_log_ = NULL;
  return temp;
}
inline ::bootstrap_message::PullLog* BootstrapMessage::mutable_pull_log() {
  
  if (pull_log_ == NULL) {
    auto* p = CreateMaybeMessage<::bootstrap_message::PullLog>(GetArenaNoVirtual());
    pull_log_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bootstrap_message.BootstrapMessage.pull_log)
  return pull_log_;
}
inline void BootstrapMessage::set_allocated_pull_log(::bootstrap_message::PullLog* pull_log) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pull_log_;
  }
  if (pull_log) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pull_log = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pull_log, submessage_arena);
    }
    
  } else {
    
  }
  pull_log_ = pull_log;
  // @@protoc_insertion_point(field_set_allocated:bootstrap_message.BootstrapMessage.pull_log)
}

// .bootstrap_message.PushLog push_log = 6;
inline bool BootstrapMessage::has_push_log() const {
  return this != internal_default_instance() && push_log_ != NULL;
}
inline void BootstrapMessage::clear_push_log() {
  if (GetArenaNoVirtual() == NULL && push_log_ != NULL) {
    delete push_log_;
  }
  push_log_ = NULL;
}
inline const ::bootstrap_message::PushLog& BootstrapMessage::_internal_push_log() const {
  return *push_log_;
}
inline const ::bootstrap_message::PushLog& BootstrapMessage::push_log() const {
  const ::bootstrap_message::PushLog* p = push_log_;
  // @@protoc_insertion_point(field_get:bootstrap_message.BootstrapMessage.push_log)
  return p != NULL ? *p : *reinterpret_cast<const ::bootstrap_message::PushLog*>(
      &::bootstrap_message::_PushLog_default_instance_);
}
inline ::bootstrap_message::PushLog* BootstrapMessage::release_push_log() {
  // @@protoc_insertion_point(field_release:bootstrap_message.BootstrapMessage.push_log)
  
  ::bootstrap_message::PushLog* temp = push_log_;
  push_log_ = NULL;
  return temp;
}
inline ::bootstrap_message::PushLog* BootstrapMessage::mutable_push_log() {
  
  if (push_log_ == NULL) {
    auto* p = CreateMaybeMessage<::bootstrap_message::PushLog>(GetArenaNoVirtual());
    push_log_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bootstrap_message.BootstrapMessage.push_log)
  return push_log_;
}
inline void BootstrapMessage::set_allocated_push_log(::bootstrap_message::PushLog* push_log) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete push_log_;
  }
  if (push_log) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      push_log = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, push_log, submessage_arena);
    }
    
  } else {
    
  }
  push_log_ = push_log;
  // @@protoc_insertion_point(field_set_allocated:bootstrap_message.BootstrapMessage.push_log)
}

// -------------------------------------------------------------------

// Init

// uint32 port = 1;
inline void Init::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 Init::port() const {
  // @@protoc_insertion_point(field_get:bootstrap_message.Init.port)
  return port_;
}
inline void Init::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:bootstrap_message.Init.port)
}

// -------------------------------------------------------------------

// Config

// uint32 run_id = 1;
inline void Config::clear_run_id() {
  run_id_ = 0u;
}
inline ::google::protobuf::uint32 Config::run_id() const {
  // @@protoc_insertion_point(field_get:bootstrap_message.Config.run_id)
  return run_id_;
}
inline void Config::set_run_id(::google::protobuf::uint32 value) {
  
  run_id_ = value;
  // @@protoc_insertion_point(field_set:bootstrap_message.Config.run_id)
}

// .bootstrap_message.Config.EvalType eval_type = 2;
inline void Config::clear_eval_type() {
  eval_type_ = 0;
}
inline ::bootstrap_message::Config_EvalType Config::eval_type() const {
  // @@protoc_insertion_point(field_get:bootstrap_message.Config.eval_type)
  return static_cast< ::bootstrap_message::Config_EvalType >(eval_type_);
}
inline void Config::set_eval_type(::bootstrap_message::Config_EvalType value) {
  
  eval_type_ = value;
  // @@protoc_insertion_point(field_set:bootstrap_message.Config.eval_type)
}

// string node_id = 3;
inline void Config::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Config::node_id() const {
  // @@protoc_insertion_point(field_get:bootstrap_message.Config.node_id)
  return node_id_.GetNoArena();
}
inline void Config::set_node_id(const ::std::string& value) {
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bootstrap_message.Config.node_id)
}
#if LANG_CXX11
inline void Config::set_node_id(::std::string&& value) {
  
  node_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bootstrap_message.Config.node_id)
}
#endif
inline void Config::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bootstrap_message.Config.node_id)
}
inline void Config::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bootstrap_message.Config.node_id)
}
inline ::std::string* Config::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:bootstrap_message.Config.node_id)
  return node_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config::release_node_id() {
  // @@protoc_insertion_point(field_release:bootstrap_message.Config.node_id)
  
  return node_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_node_id(::std::string* node_id) {
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:bootstrap_message.Config.node_id)
}

// uint32 table_size = 4;
inline void Config::clear_table_size() {
  table_size_ = 0u;
}
inline ::google::protobuf::uint32 Config::table_size() const {
  // @@protoc_insertion_point(field_get:bootstrap_message.Config.table_size)
  return table_size_;
}
inline void Config::set_table_size(::google::protobuf::uint32 value) {
  
  table_size_ = value;
  // @@protoc_insertion_point(field_set:bootstrap_message.Config.table_size)
}

// repeated string table_ids = 5;
inline int Config::table_ids_size() const {
  return table_ids_.size();
}
inline void Config::clear_table_ids() {
  table_ids_.Clear();
}
inline const ::std::string& Config::table_ids(int index) const {
  // @@protoc_insertion_point(field_get:bootstrap_message.Config.table_ids)
  return table_ids_.Get(index);
}
inline ::std::string* Config::mutable_table_ids(int index) {
  // @@protoc_insertion_point(field_mutable:bootstrap_message.Config.table_ids)
  return table_ids_.Mutable(index);
}
inline void Config::set_table_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:bootstrap_message.Config.table_ids)
  table_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Config::set_table_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:bootstrap_message.Config.table_ids)
  table_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Config::set_table_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  table_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bootstrap_message.Config.table_ids)
}
inline void Config::set_table_ids(int index, const char* value, size_t size) {
  table_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bootstrap_message.Config.table_ids)
}
inline ::std::string* Config::add_table_ids() {
  // @@protoc_insertion_point(field_add_mutable:bootstrap_message.Config.table_ids)
  return table_ids_.Add();
}
inline void Config::add_table_ids(const ::std::string& value) {
  table_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bootstrap_message.Config.table_ids)
}
#if LANG_CXX11
inline void Config::add_table_ids(::std::string&& value) {
  table_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bootstrap_message.Config.table_ids)
}
#endif
inline void Config::add_table_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  table_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bootstrap_message.Config.table_ids)
}
inline void Config::add_table_ids(const char* value, size_t size) {
  table_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bootstrap_message.Config.table_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Config::table_ids() const {
  // @@protoc_insertion_point(field_list:bootstrap_message.Config.table_ids)
  return table_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Config::mutable_table_ids() {
  // @@protoc_insertion_point(field_mutable_list:bootstrap_message.Config.table_ids)
  return &table_ids_;
}

// repeated string table_ips = 6;
inline int Config::table_ips_size() const {
  return table_ips_.size();
}
inline void Config::clear_table_ips() {
  table_ips_.Clear();
}
inline const ::std::string& Config::table_ips(int index) const {
  // @@protoc_insertion_point(field_get:bootstrap_message.Config.table_ips)
  return table_ips_.Get(index);
}
inline ::std::string* Config::mutable_table_ips(int index) {
  // @@protoc_insertion_point(field_mutable:bootstrap_message.Config.table_ips)
  return table_ips_.Mutable(index);
}
inline void Config::set_table_ips(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:bootstrap_message.Config.table_ips)
  table_ips_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Config::set_table_ips(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:bootstrap_message.Config.table_ips)
  table_ips_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Config::set_table_ips(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  table_ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bootstrap_message.Config.table_ips)
}
inline void Config::set_table_ips(int index, const char* value, size_t size) {
  table_ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bootstrap_message.Config.table_ips)
}
inline ::std::string* Config::add_table_ips() {
  // @@protoc_insertion_point(field_add_mutable:bootstrap_message.Config.table_ips)
  return table_ips_.Add();
}
inline void Config::add_table_ips(const ::std::string& value) {
  table_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bootstrap_message.Config.table_ips)
}
#if LANG_CXX11
inline void Config::add_table_ips(::std::string&& value) {
  table_ips_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bootstrap_message.Config.table_ips)
}
#endif
inline void Config::add_table_ips(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  table_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bootstrap_message.Config.table_ips)
}
inline void Config::add_table_ips(const char* value, size_t size) {
  table_ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bootstrap_message.Config.table_ips)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Config::table_ips() const {
  // @@protoc_insertion_point(field_list:bootstrap_message.Config.table_ips)
  return table_ips_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Config::mutable_table_ips() {
  // @@protoc_insertion_point(field_mutable_list:bootstrap_message.Config.table_ips)
  return &table_ips_;
}

// repeated uint32 table_ports = 7;
inline int Config::table_ports_size() const {
  return table_ports_.size();
}
inline void Config::clear_table_ports() {
  table_ports_.Clear();
}
inline ::google::protobuf::uint32 Config::table_ports(int index) const {
  // @@protoc_insertion_point(field_get:bootstrap_message.Config.table_ports)
  return table_ports_.Get(index);
}
inline void Config::set_table_ports(int index, ::google::protobuf::uint32 value) {
  table_ports_.Set(index, value);
  // @@protoc_insertion_point(field_set:bootstrap_message.Config.table_ports)
}
inline void Config::add_table_ports(::google::protobuf::uint32 value) {
  table_ports_.Add(value);
  // @@protoc_insertion_point(field_add:bootstrap_message.Config.table_ports)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Config::table_ports() const {
  // @@protoc_insertion_point(field_list:bootstrap_message.Config.table_ports)
  return table_ports_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Config::mutable_table_ports() {
  // @@protoc_insertion_point(field_mutable_list:bootstrap_message.Config.table_ports)
  return &table_ports_;
}

// uint32 num_nodes_in_dist = 20;
inline void Config::clear_num_nodes_in_dist() {
  num_nodes_in_dist_ = 0u;
}
inline ::google::protobuf::uint32 Config::num_nodes_in_dist() const {
  // @@protoc_insertion_point(field_get:bootstrap_message.Config.num_nodes_in_dist)
  return num_nodes_in_dist_;
}
inline void Config::set_num_nodes_in_dist(::google::protobuf::uint32 value) {
  
  num_nodes_in_dist_ = value;
  // @@protoc_insertion_point(field_set:bootstrap_message.Config.num_nodes_in_dist)
}

// uint32 num_cnodes_in_dist = 21;
inline void Config::clear_num_cnodes_in_dist() {
  num_cnodes_in_dist_ = 0u;
}
inline ::google::protobuf::uint32 Config::num_cnodes_in_dist() const {
  // @@protoc_insertion_point(field_get:bootstrap_message.Config.num_cnodes_in_dist)
  return num_cnodes_in_dist_;
}
inline void Config::set_num_cnodes_in_dist(::google::protobuf::uint32 value) {
  
  num_cnodes_in_dist_ = value;
  // @@protoc_insertion_point(field_set:bootstrap_message.Config.num_cnodes_in_dist)
}

// uint32 num_nodes_in_city = 22;
inline void Config::clear_num_nodes_in_city() {
  num_nodes_in_city_ = 0u;
}
inline ::google::protobuf::uint32 Config::num_nodes_in_city() const {
  // @@protoc_insertion_point(field_get:bootstrap_message.Config.num_nodes_in_city)
  return num_nodes_in_city_;
}
inline void Config::set_num_nodes_in_city(::google::protobuf::uint32 value) {
  
  num_nodes_in_city_ = value;
  // @@protoc_insertion_point(field_set:bootstrap_message.Config.num_nodes_in_city)
}

// uint32 num_cnodes_in_city = 23;
inline void Config::clear_num_cnodes_in_city() {
  num_cnodes_in_city_ = 0u;
}
inline ::google::protobuf::uint32 Config::num_cnodes_in_city() const {
  // @@protoc_insertion_point(field_get:bootstrap_message.Config.num_cnodes_in_city)
  return num_cnodes_in_city_;
}
inline void Config::set_num_cnodes_in_city(::google::protobuf::uint32 value) {
  
  num_cnodes_in_city_ = value;
  // @@protoc_insertion_point(field_set:bootstrap_message.Config.num_cnodes_in_city)
}

// uint32 num_nodes_in_state = 24;
inline void Config::clear_num_nodes_in_state() {
  num_nodes_in_state_ = 0u;
}
inline ::google::protobuf::uint32 Config::num_nodes_in_state() const {
  // @@protoc_insertion_point(field_get:bootstrap_message.Config.num_nodes_in_state)
  return num_nodes_in_state_;
}
inline void Config::set_num_nodes_in_state(::google::protobuf::uint32 value) {
  
  num_nodes_in_state_ = value;
  // @@protoc_insertion_point(field_set:bootstrap_message.Config.num_nodes_in_state)
}

// uint32 num_cnodes_in_state = 25;
inline void Config::clear_num_cnodes_in_state() {
  num_cnodes_in_state_ = 0u;
}
inline ::google::protobuf::uint32 Config::num_cnodes_in_state() const {
  // @@protoc_insertion_point(field_get:bootstrap_message.Config.num_cnodes_in_state)
  return num_cnodes_in_state_;
}
inline void Config::set_num_cnodes_in_state(::google::protobuf::uint32 value) {
  
  num_cnodes_in_state_ = value;
  // @@protoc_insertion_point(field_set:bootstrap_message.Config.num_cnodes_in_state)
}

// uint32 num_nodes_in_country = 26;
inline void Config::clear_num_nodes_in_country() {
  num_nodes_in_country_ = 0u;
}
inline ::google::protobuf::uint32 Config::num_nodes_in_country() const {
  // @@protoc_insertion_point(field_get:bootstrap_message.Config.num_nodes_in_country)
  return num_nodes_in_country_;
}
inline void Config::set_num_nodes_in_country(::google::protobuf::uint32 value) {
  
  num_nodes_in_country_ = value;
  // @@protoc_insertion_point(field_set:bootstrap_message.Config.num_nodes_in_country)
}

// uint32 num_cnodes_in_country = 27;
inline void Config::clear_num_cnodes_in_country() {
  num_cnodes_in_country_ = 0u;
}
inline ::google::protobuf::uint32 Config::num_cnodes_in_country() const {
  // @@protoc_insertion_point(field_get:bootstrap_message.Config.num_cnodes_in_country)
  return num_cnodes_in_country_;
}
inline void Config::set_num_cnodes_in_country(::google::protobuf::uint32 value) {
  
  num_cnodes_in_country_ = value;
  // @@protoc_insertion_point(field_set:bootstrap_message.Config.num_cnodes_in_country)
}

// uint32 num_nodes_in_continent = 28;
inline void Config::clear_num_nodes_in_continent() {
  num_nodes_in_continent_ = 0u;
}
inline ::google::protobuf::uint32 Config::num_nodes_in_continent() const {
  // @@protoc_insertion_point(field_get:bootstrap_message.Config.num_nodes_in_continent)
  return num_nodes_in_continent_;
}
inline void Config::set_num_nodes_in_continent(::google::protobuf::uint32 value) {
  
  num_nodes_in_continent_ = value;
  // @@protoc_insertion_point(field_set:bootstrap_message.Config.num_nodes_in_continent)
}

// -------------------------------------------------------------------

// Broadcast

// uint32 workload_size = 1;
inline void Broadcast::clear_workload_size() {
  workload_size_ = 0u;
}
inline ::google::protobuf::uint32 Broadcast::workload_size() const {
  // @@protoc_insertion_point(field_get:bootstrap_message.Broadcast.workload_size)
  return workload_size_;
}
inline void Broadcast::set_workload_size(::google::protobuf::uint32 value) {
  
  workload_size_ = value;
  // @@protoc_insertion_point(field_set:bootstrap_message.Broadcast.workload_size)
}

// -------------------------------------------------------------------

// PullLog

// uint32 run_id = 1;
inline void PullLog::clear_run_id() {
  run_id_ = 0u;
}
inline ::google::protobuf::uint32 PullLog::run_id() const {
  // @@protoc_insertion_point(field_get:bootstrap_message.PullLog.run_id)
  return run_id_;
}
inline void PullLog::set_run_id(::google::protobuf::uint32 value) {
  
  run_id_ = value;
  // @@protoc_insertion_point(field_set:bootstrap_message.PullLog.run_id)
}

// -------------------------------------------------------------------

// PushLog

// uint32 run_id = 1;
inline void PushLog::clear_run_id() {
  run_id_ = 0u;
}
inline ::google::protobuf::uint32 PushLog::run_id() const {
  // @@protoc_insertion_point(field_get:bootstrap_message.PushLog.run_id)
  return run_id_;
}
inline void PushLog::set_run_id(::google::protobuf::uint32 value) {
  
  run_id_ = value;
  // @@protoc_insertion_point(field_set:bootstrap_message.PushLog.run_id)
}

// string log = 2;
inline void PushLog::clear_log() {
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PushLog::log() const {
  // @@protoc_insertion_point(field_get:bootstrap_message.PushLog.log)
  return log_.GetNoArena();
}
inline void PushLog::set_log(const ::std::string& value) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bootstrap_message.PushLog.log)
}
#if LANG_CXX11
inline void PushLog::set_log(::std::string&& value) {
  
  log_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bootstrap_message.PushLog.log)
}
#endif
inline void PushLog::set_log(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bootstrap_message.PushLog.log)
}
inline void PushLog::set_log(const char* value, size_t size) {
  
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bootstrap_message.PushLog.log)
}
inline ::std::string* PushLog::mutable_log() {
  
  // @@protoc_insertion_point(field_mutable:bootstrap_message.PushLog.log)
  return log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PushLog::release_log() {
  // @@protoc_insertion_point(field_release:bootstrap_message.PushLog.log)
  
  return log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushLog::set_allocated_log(::std::string* log) {
  if (log != NULL) {
    
  } else {
    
  }
  log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:bootstrap_message.PushLog.log)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bootstrap_message

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::bootstrap_message::BootstrapMessage_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bootstrap_message::BootstrapMessage_Type>() {
  return ::bootstrap_message::BootstrapMessage_Type_descriptor();
}
template <> struct is_proto_enum< ::bootstrap_message::Config_EvalType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bootstrap_message::Config_EvalType>() {
  return ::bootstrap_message::Config_EvalType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_bootstrap_5fmessage_2eproto
